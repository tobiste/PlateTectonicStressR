% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/statistics.R
\name{roll_normchisq}
\alias{roll_normchisq}
\title{Apply Rolling Functions using circular statistics}
\usage{
roll_normchisq(
  obs,
  prd,
  unc = NULL,
  width,
  by.column = FALSE,
  partial = TRUE,
  fill = NA,
  ...
)
}
\arguments{
\item{obs}{Numeric vector containing the observed azimuth of
\eqn{\sigma_{Hmax}}{SHmax},
same length as \code{prd}}

\item{prd}{Numeric vector containing the modeled azimuths of
\eqn{\sigma_{Hmax}}{SHmax}, i.e.
the return object from \code{model_shmax()}}

\item{unc}{Uncertainty of observed \eqn{\sigma_{Hmax}}{SHmax}, either a
numeric vector or a number}

\item{width}{numeric vector or list. In the simplest case this is an integer
specifying the window width (in numbers of observations) which is aligned to
the original sample according to the \code{align} argument. Alternatively, width
can be a list regarded as offsets compared to the current time.}

\item{by.column}{logical. If \code{TRUE}, FUN is applied to each column separately.}

\item{partial}{logical or numeric. If \code{FALSE} then \code{FUN} is only
applied when all indexes of the rolling window are within the observed time
range. If \code{TRUE} (default), then the subset of indexes that are in range
are passed to \code{FUN}. A numeric argument to partial can be used to determine
the minimal window size for partial computations. See below for more details.}

\item{fill}{a three-component vector or list (recycled otherwise) providing
filling values at the left/within/to the right of the data range. See the
fill argument of \code{\link[zoo:na.fill]{zoo::na.fill()}} for details}

\item{...}{
  Arguments passed on to \code{\link[zoo:rollapply]{zoo::rollapply}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
numeric vector  with the results of the rolling function.
}
\description{
A generic function for applying a function to rolling margins of an array.
}
\note{
If the rolling statistics are applied to values that are a function of
distance it is recommended to sort the values first.
}
\examples{
data("plates")
plate_boundary <- subset(plates, plates$pair == "na-pa")
data("san_andreas")
ep <- subset(nuvel1, nuvel1$plate.rot == "na")
distance <- distance_from_pb(
  x = san_andreas,
  euler = ep,
  pb = plate_boundary,
  tangential = TRUE
)
dat <- san_andreas[order(distance), ]
dat.PoR <- PoR_shmax(san_andreas, ep, "right")
roll_normchisq(dat.PoR$azi.PoR, 135, dat$unc, width = 51)
}
